{"version":3,"file":"static/js/453.003fd1ce.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","../node_modules/nanoid/index.browser.js","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import { Form, Button } from 'react-bootstrap';\n\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport { addContactThunk } from 'redux/contactsThunk';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    if (name === 'name') {\n      setName(value);\n      return;\n    }\n    if (name === 'number') {\n      setNumber(value);\n      return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const isInContacts = contacts.some(\n      contacts => contacts.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (isInContacts) {\n      alert('This contact is already exist');\n      return;\n    }\n\n    dispatch(addContactThunk({ name, number }));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form\n      onSubmit={handleSubmit}\n      style={{\n        width: '300px',\n        marginTop: '15px',\n      }}\n    >\n      <Form.Group className=\"mb-3\">\n        <Form.Label>Contact name</Form.Label>\n        <Form.Control\n          name=\"name\"\n          value={name}\n          type=\"text\"\n          placeholder=\"Enter contact name\"\n          required\n          onChange={handleChange}\n        />\n        <Form.Text className=\"text-muted\"></Form.Text>\n      </Form.Group>\n\n      <Form.Group className=\"mb-3\">\n        <Form.Label>Phone</Form.Label>\n        <Form.Control\n          name=\"number\"\n          value={number}\n          type=\"tel\"\n          placeholder=\"Enter contact phone\"\n          required\n          onChange={handleChange}\n        />\n      </Form.Group>\n      <Button variant=\"primary\" type=\"submit\">\n        Create contact\n      </Button>\n    </Form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"contactListItem\":\"ContactList_contactListItem__3th7-\",\"contactListBtn\":\"ContactList_contactListBtn__iwQAv\"};","import { useDispatch, useSelector } from 'react-redux';\nimport styles from './ContactList.module.css';\nimport {\n  selectAuthentificationStatus,\n  selectContacts,\n  selectContactsError,\n  selectContactsLoading,\n  selectFilter,\n} from 'redux/selectors';\nimport { useEffect } from 'react';\nimport { Loader } from 'components/Loader/Loader';\nimport { deleteContactThunk, fetchContactsThunk } from 'redux/contactsThunk';\n\nexport const ContactList = () => {\n  const isLoggedIn = useSelector(selectAuthentificationStatus);\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectContactsLoading);\n  const error = useSelector(selectContactsError);\n  const filter = useSelector(selectFilter);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!isLoggedIn) return;\n    dispatch(fetchContactsThunk());\n  }, [dispatch, isLoggedIn]);\n\n  const filteredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n  const showContacts = Array.isArray(contacts) && contacts.length > 0;\n\n  return (\n    <div>\n      {error && <p>{error}</p>}\n      {isLoading && <Loader />}\n      {showContacts && (\n        <ul className={styles.contactList}>\n          {filteredContacts().map(contact => {\n            const { id, name, number } = contact;\n            return (\n              <li className={styles.contactListItem} key={id}>\n                <div>\n                  <p>\n                    <b>Name:</b> {name}\n                  </p>\n                  <p>\n                    <b>Number:</b> {number}\n                  </p>\n                </div>\n                <button\n                  aria-label=\"Delete\"\n                  type=\"button\"\n                  className={styles.contactListBtn}\n                  onClick={() => dispatch(deleteContactThunk(id))}\n                >\n                  Delete\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filterWrap\":\"Filter_filterWrap__xOHoa\",\"filterLabel\":\"Filter_filterLabel__+pnW-\",\"filterInput\":\"Filter_filterInput__1Cysk\"};","import styles from './Filter.module.css';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contactsReducer';\nimport { selectFilter } from 'redux/selectors';\n\nconst filterId = nanoid();\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <div className={styles.filterWrap}>\n      <label htmlFor={filterId} className={styles.filterLabel}>\n        Find contacts by name\n      </label>\n      <input\n        className={styles.filterInput}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        id={filterId}\n        onChange={({ target }) => {\n          dispatch(setFilter(target.value));\n        }}\n      />\n    </div>\n  );\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Container } from 'react-bootstrap';\n\nconst ContactsPage = () => {\n  return (\n    <Container>\n      <h1>My contacts</h1>\n      <ContactForm style={{ margin: 'auto' }} />\n      <Filter />\n      <ContactList />\n    </Container>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["ContactForm","contacts","useSelector","selectContacts","dispatch","useDispatch","useState","name","setName","number","setNumber","handleChange","target","value","reset","Form","onSubmit","e","preventDefault","isInContacts","some","toLowerCase","alert","addContactThunk","style","width","marginTop","className","type","placeholder","required","onChange","Button","variant","ContactList","isLoggedIn","selectAuthentificationStatus","isLoading","selectContactsLoading","error","selectContactsError","filter","selectFilter","useEffect","fetchContactsThunk","showContacts","Array","isArray","length","Loader","styles","normalizedFilter","contact","includes","filteredContacts","map","id","onClick","deleteContactThunk","filterId","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","Filter","htmlFor","setFilter","Container","margin"],"sourceRoot":""}